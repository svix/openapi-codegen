{% for c in referenced_components -%}
import {
    {{ c | to_upper_camel_case }},
    {{ c | to_upper_camel_case }}Serializer,
} from './{{ c | to_lower_camel_case }}';
{% endfor -%}

{% macro field_from_json(field_expr, type, field_required) %}
    {%- if type.is_datetime() -%}
        new Date({{ field_expr }})
    {%- elif type.is_schema_ref() -%}
        {%- if not field_required -%}
            {{ field_expr }} ? {{ type.to_js() }}Serializer._fromJsonObject({{ field_expr }}): undefined
        {%- else -%}
            {{ type.to_js() }}Serializer._fromJsonObject({{ field_expr }})
        {%- endif %}
    {%- elif type.is_list() or type.is_set() -%}
        {{ field_expr }}
        {%- set inner_t = type.inner_type() -%}
        {%- if inner_t.is_datetime()
            or inner_t.is_schema_ref()
            or inner_t.is_list()
            or inner_t.is_set()
            or inner_t.is_map() -%}
            .map((item: {{ inner_t.to_js() }}) => {{ field_from_json("item", inner_t, true) }})
        {%- endif -%}
    {%- elif type.is_map() -%}
        {%- set value_t = type.value_type() -%}
        {%- if value_t.is_datetime()
            or value_t.is_schema_ref()
            or value_t.is_list()
            or value_t.is_set()
            or value_t.is_map() -%}
            Object.fromEntries(Object.entries({{ field_expr }}).map(
                (item : {{ inner_t.to_js() }}) => [item[0], {{ field_from_json("item[1]", value_t, true) }}]
            ))
        {%- else -%}
            {{ field_expr }}
        {%- endif -%}
    {%- else -%}
        {{ field_expr }}
    {%- endif -%}
{% endmacro -%}

{% macro field_to_json(field_expr, type, field_required) %}
    {%- if type.is_schema_ref() -%}
        {%- if not field_required -%}
        {{ field_expr }} ? {{ type.to_js() }}Serializer._toJsonObject({{ field_expr }}) : undefined
        {%- else -%}
        {{ type.to_js() }}Serializer._toJsonObject({{ field_expr }})
        {%- endif -%}
    {%- elif type.is_list() or type.is_set() -%}
        {{ field_expr }}
        {%- set inner_t = type.inner_type() -%}
        {%- if inner_t.is_schema_ref()
            or inner_t.is_list()
            or inner_t.is_set()
            or inner_t.is_map() -%}
            {%- if not field_required -%}?{% endif -%}
            .map((item) => {{ field_to_json("item", inner_t, true) }})
        {%- endif -%}
    {%- elif type.is_map() -%}
        {%- set value_t = type.value_type() -%}
        {%- if value_t.is_schema_ref()
            or value_t.is_list()
            or value_t.is_set()
            or value_t.is_map() -%}
            Object.fromEntries(Object.entries({{ field_expr }}).map(
                (item) => [item[0], {{ field_to_json("item[1]", value_t, true) }}]
            ))
        {%- else -%}
            {{ field_expr }}
        {%- endif -%}
    {%- else -%}
        {{ field_expr }}
    {%- endif -%}
{% endmacro -%}

{{ doc_comment }}
export interface {{ type.name | to_upper_camel_case }} {
    {% for field in type.fields -%}
        {% if field.description is defined -%}
            {{ field.description | with_javadoc_deprecation(field.deprecated) | to_doc_comment(style="js") }}
        {% endif -%}
        {% set field_lhs = field.name | to_lower_camel_case -%}
        {% if not field.required %}{% set field_lhs %}{{ field_lhs }}?{% endset %}{% endif -%}
        {% set ty = field.type.to_js() -%}
        {% if field.nullable %}{% set ty %}{{ ty }} | null{% endset %}{% endif -%}
        {{ field_lhs }}: {{ ty }};
    {% endfor -%}
}

export const {{ type.name | to_upper_camel_case }}Serializer = {
    _fromJsonObject(object: any): {{ type.name | to_upper_camel_case }} {
        return {
            {% for field in type.fields -%}
                {% set field_expr %}object['{{ field.name }}']{% endset -%}
                {{ field.name | to_lower_camel_case }}: {{ field_from_json(field_expr, field.type, field.required) }},
            {% endfor -%}
        };
    },

    _toJsonObject(self: {{ type.name | to_upper_camel_case }}): any {
        return {
            {% for field in type.fields -%}
                {% set field_expr %}self.{{ field.name | to_lower_camel_case }}{% endset -%}
                '{{ field.name }}': {{ field_to_json(field_expr, field.type, field.required) }},
            {% endfor -%}
        };
    }
}
