import typing as t
from pydantic import Field
from datetime import datetime

from .common import BaseModel

{% for c in referenced_components -%}
from . {{ c | to_snake_case }} import {{ c | to_upper_camel_case }}
{% endfor -%}

class {{ type.name | to_upper_camel_case }}(BaseModel):
{%- if type.description is defined %}
    {{ type.description | to_doc_comment(style="python") | indent(4) }}
{% endif %}
{%- for field in type.fields %}
    {%- if field.required and not field.nullable %}
        {%- if field.name | to_lower_camel_case != field.name %}
    {{ field.name | to_snake_case }}: {{ field.type.to_python() }} = Field(alias="{{ field.name }}")
        {%- else %}
    {{ field.name | to_snake_case }}: {{ field.type.to_python() }}
        {%- endif %}
    {%- elif field.required and field.nullable %}
        {%- if field.name | to_lower_camel_case != field.name %}
    {{ field.name | to_snake_case }}: t.Optional[{{ field.type.to_python() }}] = Field(alias="{{ field.name }}")
        {%- else %}
    {{ field.name | to_snake_case }}: t.Optional[{{ field.type.to_python() }}]
        {%- endif %}
    {%- else %}
        {%- if field.name | to_lower_camel_case != field.name %}
    {{ field.name | to_snake_case }}: t.Optional[{{ field.type.to_python() }}] = Field(default=None, alias="{{ field.name }}")
        {%- else %}
    {{ field.name | to_snake_case }}: t.Optional[{{ field.type.to_python() }}] = None
        {%- endif %}
    {%- endif %}
    {%- if field.description is defined %}
    {{ field.description | to_doc_comment(style="python") | indent(4) }}
    {%- endif %}
{% endfor %}
