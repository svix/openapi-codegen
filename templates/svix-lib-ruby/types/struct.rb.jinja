# frozen_string_literal: true
# This file is @generated
{% set class_ty = type.name | to_upper_camel_case  -%}
require 'json'

module Svix
  {% if type.description is defined -%}
  {{ type.description | to_doc_comment(style="ruby") | indent(4) }}
  {% endif -%}
  class {{ class_ty }}
    {% for field in type.fields -%}
    attr_accessor :{{ field.name | to_snake_case }}
    {% endfor %}
    ALL_FIELD ||= [
      {%- for f in type.fields -%}
      "{{ f.name | to_snake_case }}"{% if not loop.last %},{% endif %}
      {%- endfor -%}
    ].freeze
    private_constant :ALL_FIELD

    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `Svix::{{ class_ty }}` new method"
      end
      attributes.each do |k, v|
        unless ALL_FIELD.include? k.to_s
          fail ArgumentError, "The field #{k} is not part of Svix::{{ class_ty }}"
        end
        instance_variable_set("@#{k}", v)
        instance_variable_set("@__#{k}_is_defined", true)
      end
    end

    def self.deserialize(attributes = {})
      attributes = attributes.transform_keys(&:to_s)
      attrs = Hash.new
      {% for field in type.fields -%}
        {% set val_expr %}attributes['{{ field.name }}']{% endset -%}
        {% set not_nil_check = "" -%}
        {% if not field.required -%}
          {% set not_nil_check %}if {{ val_expr }}{% endset -%}
        {% endif -%}

        {% if (field.type.is_set() or  field.type.is_list()) and field.type.inner_type().is_schema_ref() -%}
          {% set val_expr -%}
              attributes['{{ field.name }}'].map { | v | Svix::{{ field.type.inner_type().to_ruby() }}.deserialize v } {{ not_nil_check }}
          {%- endset -%}
        {% elif field.type.is_schema_ref() -%}
          {% set val_expr -%}
              Svix::{{ field.type.to_ruby() }}.deserialize(attributes['{{ field.name }}']) {{ not_nil_check }}
          {%- endset -%}
        {% elif field.type.is_datetime() -%}
          {% set val_expr %}DateTime.rfc3339({{ val_expr }}).to_time {{ not_nil_check }}{% endset -%}
        {% endif -%}
        attrs['{{ field.name | to_snake_case }}'] = {{ val_expr }}
      {% endfor -%}
      new attrs
    end

    def serialize
      out = Hash.new
      {% for field in type.fields -%}
        {% set val_expr %}@{{ field.name | to_snake_case }}{% endset -%}

        {% if (field.type.is_set() or  field.type.is_list()) and field.type.inner_type().is_schema_ref() -%}
          {% set val_expr %}{{ val_expr }}.map { | v | v.serialize }{% endset -%}
        {% elif field.type.is_schema_ref() -%}
          {% set val_expr %}{{ val_expr }}.serialize{% endset -%}
        {% else -%}
          {% set val_expr %}Svix::serialize_primitive({{ val_expr }}){% endset -%}
        {% endif -%}
        {% if type.name is endingwith "Patch" and field.nullable -%}
        out['{{ field.name }}'] = {{ val_expr }} if @__{{ field.name | to_snake_case }}_is_defined
        {% else -%}
        out['{{ field.name }}'] = {{ val_expr }} if @{{ field.name | to_snake_case }}
        {% endif -%}
      {% endfor -%}
      out
    end

    # Serializes the object to a json string
    # @return String
    def to_json
      JSON.dump(serialize)
    end
  end
end
