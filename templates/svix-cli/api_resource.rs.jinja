{% set resource_snake_case = resource.name | to_snake_case -%}
{% set resource_type_name = resource.name | to_upper_camel_case -%}
{% set resource_id_name %}{{ resource_snake_case }}_id{% endset -%}
{% if resource.name == "application" %}{% set resource_id_name = "app_id" %}{% endif -%}
{% if resource.name == "message" %}{% set resource_id_name = "msg_id" %}{% endif -%}
{% if resource.name == "integration" %}{% set resource_id_name = "integ_id" %}{% endif -%}

use chrono::{DateTime, Utc};
use clap::{Args, Subcommand};
use svix::api::*;

use crate::json::JsonOf;

{% for op in resource.operations -%}
    {% if (op.query_params | length > 0) or (op.header_params | length > 0) -%}
        {% set param_struct_type_name -%}
            {{ resource_type_name }}{{ op.name | to_upper_camel_case }}Options
        {%- endset -%}

        #[derive(Args, Clone)]
        pub struct {{ param_struct_type_name }} {
            {% for p in op.query_params -%}
                {% set ty = p.type.to_rust() -%}
                {% if not p.required %}{% set ty %}Option<{{ ty }}>{% endset %}{% endif -%}
                {% if p.description is defined -%}
                    {{ p.description | to_doc_comment(style="rust") }}
                {% endif -%}
                #[arg(long)]
                pub {{ p.name | to_snake_case }}: {{ ty }},
            {% endfor %}
            {% for p in op.header_params -%}
                {% set ty = "String" -%}
                {% if not p.required %}{% set ty %}Option<{{ ty }}>{% endset %}{% endif %}
                {% if p.description is defined -%}
                    {{ p.description | to_doc_comment(style="rust") }}
                {% endif -%}
                #[arg(long)]
                pub {{ p.name | to_snake_case }}: {{ ty }},
            {% endfor -%}
        }

        impl From<{{ param_struct_type_name }}> for svix::api::{{ param_struct_type_name }} {
            fn from(
                {{ param_struct_type_name }} {
                    {% for p in op.query_params -%}
                        {{ p.name | to_snake_case }},
                    {% endfor -%}
                    {% for p in op.header_params -%}
                        {{ p.name | to_snake_case }},
                    {% endfor -%}
                }: {{ param_struct_type_name }},
            ) -> Self {
                Self {
                    {% for p in op.query_params -%}
                        {% if p.type.is_datetime() -%}
                            {{ p.name | to_snake_case }}:
                            {%- if p.required %}
                            {{ p.name | to_snake_case }}.to_rfc3339(),
                            {%- else %}
                            {{ p.name | to_snake_case }}.map(|dt| dt.to_rfc3339()),
                            {% endif -%}
                        {% else -%}
                            {{ p.name | to_snake_case }},
                        {% endif -%}
                    {% endfor -%}
                    {% for p in op.header_params -%}
                        {{ p.name | to_snake_case }},
                    {% endfor -%}
                }
            }
        }
    {% endif %}
{% endfor %}

#[derive(Args)]
#[command(args_conflicts_with_subcommands = true, flatten_help = true)]
pub struct {{ resource_type_name }}Args {
    #[command(subcommand)]
    pub command: {{ resource_type_name }}Commands,
}

#[derive(Subcommand)]
pub enum {{ resource_type_name }}Commands {
    {% for op in resource.operations -%}
        {% set has_params = (op.query_params | length > 0) or (op.header_params | length > 0) -%}

        {% if op.description is defined -%}
            {{ op.description | to_doc_comment(style="rust") }}
        {% endif -%}
        {{ op.name | to_upper_camel_case }} {
            {# path parameters -#}
            {% for p in op.path_params -%}
                {% if p == resource_id_name -%}
                    id: String,
                {% else -%}
                    {{ p }}: String,
                {% endif -%}
            {% endfor -%}

            {# body parameter struct -#}
            {% if op.request_body_schema_name is defined -%}
                {{ op.request_body_schema_name | to_snake_case }}:
                {% if op.request_body_all_optional %}
                Option<JsonOf<{{ op.request_body_schema_name }}>>
                {% else %}
                JsonOf<{{ op.request_body_schema_name }}>
                {% endif %}
                ,
            {% endif -%}

            {# query / header parameters -#}
            {% if has_params -%}
            #[clap(flatten)]
            options: {{ resource_type_name }}{{ op.name | to_upper_camel_case }}Options,
            {% endif -%}
        },
    {% endfor %}
}

impl {{ resource_type_name }}Commands {
    pub async fn exec(self, client: &Svix, color_mode: colored_json::ColorMode) -> anyhow::Result<()> {
        match self {
            {% for op in resource.operations -%}
                {% set has_params = (op.query_params | length > 0) or (op.header_params | length > 0) -%}

                Self::{{ op.name | to_upper_camel_case }} {
                    {# path parameters -#}
                    {% for p in op.path_params -%}
                        {% if p == resource_id_name -%}
                            id,
                        {% else -%}
                            {{ p }},
                        {% endif -%}
                    {% endfor -%}

                    {# body parameter struct -#}
                    {% if op.request_body_schema_name is defined -%}
                        {{ op.request_body_schema_name | to_snake_case }},
                    {% endif -%}

                    {# query / header parameters -#}
                    {% if has_params %}options,{% endif -%}
                } => {
                    {% if op.response_body_schema_name is defined -%}
                        let resp =
                    {% endif -%}

                    client
                        .{{ resource_snake_case }}()
                        .{{ op.name | to_snake_case }}(
                            {# path parameters -#}
                            {% for p in op.path_params -%}
                                {% if p == resource_id_name -%}
                                    id,
                                {% else -%}
                                    {{ p }},
                                {% endif -%}
                            {% endfor -%}

                            {# body parameter struct -#}
                            {% if op.request_body_schema_name is defined -%}
                                {{ op.request_body_schema_name | to_snake_case }}
                                {% if op.request_body_all_optional -%}
                                    .unwrap_or_default()
                                {% endif -%}
                                    .into_inner(),
                            {% endif -%}

                            {# query parameters -#}
                            {% if has_params %}
                                {% set has_required_params =
                                    (op.query_params | selectattr("required") | length > 0) or
                                    (op.header_params | selectattr("required") | length > 0) -%}
                                {%- if has_required_params -%}
                                    options.into(),
                                {% else -%}
                                    Some(options.into()),
                                {% endif -%}
                            {% endif -%}
                        )
                        .await?;

                    {%- if op.response_body_schema_name is defined %}
                        crate::json::print_json_output(&resp, color_mode)?;
                    {%- endif %}
                }
            {% endfor %}
        }

        Ok(())
    }
}
