// this file is @generated
{% set resource_type_name = resource.name | to_upper_camel_case -%}
{% set api_type_name %}{{ resource_type_name }}Api{% endset -%}

package com.svix.kotlin

import com.svix.kotlin.exceptions.ApiException
import com.svix.kotlin.internal.apis.{{ api_type_name }}
{% for c in referenced_components -%}
    import com.svix.kotlin.models.{{ c | to_upper_camel_case }}
{% endfor -%}

{% for op in resource.operations -%}
    {% if op.query_params | length > 0 -%}
    class {{ resource_type_name }}{{ op.name | to_upper_camel_case }}Options {
        {%- for p in op.query_params %}
            {% set field_ty = p.type.to_kotlin() -%}
            {% if not p.required %}{% set field_ty %}{{ field_ty }}?{% endset %}{% endif -%}
            var {{ p.name | to_lower_camel_case }}: {{ field_ty -}}
            {% if not p.required %} = null
            {%- elif p.default is defined %} = {{ p.default }}
            {%- endif -%}
        {% endfor %}

        {% for p in op.query_params -%}
            {% set field_name = p.name | to_lower_camel_case %}
            {{ p.description | to_doc_comment(style="kotlin") }}
            {% set field_ty = p.type.to_kotlin() -%}
            fun {{ field_name }}({{ field_name }}: {{ field_ty }}) = apply {
                this.{{ field_name }} = {{ field_name }}
            }
        {% endfor -%}
    }

    {% endif -%}
{% endfor -%}

class {{ resource_type_name }} internal constructor(token: String, options: SvixOptions) {
    private val api = {{ api_type_name }}(options.serverUrl)

    init {
        api.accessToken = token
        api.userAgent = options.getUA()
        options.initialRetryDelayMillis?.let { api.initialRetryDelayMillis = it }
        options.numRetries?.let { api.numRetries = it }
    }

    {% for op in resource.operations -%}
        {% set has_query_params = op.query_params | length > 0 -%}
        {% set has_required_query_params =
            op.query_params | selectattr("required") | length > 0 -%}
        {% set has_header_params = op.header_params | length > 0 -%}
        {{ op.description | with_javadoc_deprecation(op.deprecated) | to_doc_comment(style="kotlin") }}
        {% if op.deprecated -%}
            @Deprecated
        {% endif -%}
        suspend fun {{ op.name | to_lower_camel_case }}(
            {# path parameters -#}
            {% for p in op.path_params -%}
                {{ p | to_lower_camel_case }}: String,
            {% endfor -%}

            {# body parameter interface -#}
            {% if op.request_body_schema_name is defined -%}
                {% set field_name = op.request_body_schema_name | to_lower_camel_case -%}
                {{ field_name }}: {{ op.request_body_schema_name }},
            {% endif -%}

            {# query parameters -#}
            {% if has_query_params -%}
                {% set field_ty -%}
                    {{ resource_type_name }}{{ op.name | to_upper_camel_case }}Options
                {%- endset -%}
                options: {{ field_ty }}
                {%- if not has_required_query_params %} = {{ field_ty }}(){% endif -%}
                ,
            {% endif -%}

            {# PostOptions -#}
            {% if has_header_params -%}
                {# for now, only idempotency-key is supported in header params -#}
                options: PostOptions = PostOptions(),
            {% endif -%}
        )
        {%- if op.response_body_schema_name is defined -%}
            : {{ op.response_body_schema_name | replace("_", "") }}
        {%- endif %}
        {
            try {
                {% if op.response_body_schema_name is defined %}return {% endif -%}
                api.{{ op.id | to_lower_camel_case }}(
                    {# path parameters -#}
                    {% for p in op.path_params -%}
                        {{ p | to_lower_camel_case }},
                    {% endfor -%}

                    {# body parameter interface -#}
                    {% if op.request_body_schema_name is defined -%}
                        {{ op.request_body_schema_name | to_lower_camel_case }},
                    {% endif -%}

                    {# query parameters, PostOptions -#}
                    {% for p in op.query_params -%}
                        options.{{ p.name | to_lower_camel_case }},
                    {% endfor -%}

                    {# PostOptions -#}
                    {% if has_header_params -%}
                        options.idempotencyKey,
                    {% endif -%}
                )
            } catch (e: Exception) {
                throw ApiException.wrap(e)
            }
        }

    {% set extra_path -%}
        api_extra/{{ resource.name | to_snake_case }}_{{ op.name | to_snake_case }}.kt
    {%- endset -%}
    {% include extra_path ignore missing %}
    {% endfor -%}
}

{% set extra_path -%}
    api_extra/{{ resource.name | to_snake_case }}.kt
{%- endset -%}
{% include extra_path ignore missing %}
